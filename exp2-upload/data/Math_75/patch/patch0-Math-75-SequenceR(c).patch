--- /src/main/java/org/apache/commons/math/stat/Frequency.java
+++ /src/main/java/org/apache/commons/math/stat/Frequency.java
@@ -21,7 +21,6 @@
 import java.util.Iterator;
 import java.util.Comparator;
 import java.util.TreeMap;
-
 import org.apache.commons.math.MathRuntimeException;
 
 /**
@@ -47,10 +46,14 @@
  */
 public class Frequency implements Serializable {
 
-    /** Serializable version identifier */
+    /**
+     * Serializable version identifier
+     */
     private static final long serialVersionUID = -3845586908418844111L;
 
-    /** underlying collection */
+    /**
+     * underlying collection
+     */
     private final TreeMap<Comparable<?>, Long> freqTable;
 
     /**
@@ -110,12 +113,10 @@
      */
     @Deprecated
     public void addValue(Object v) {
-        if (v instanceof Comparable<?>){
+        if (v instanceof Comparable<?>) {
             addValue((Comparable<?>) v);
         } else {
-            throw MathRuntimeException.createIllegalArgumentException(
-                  "class ({0}) does not implement Comparable",
-                  v.getClass().getName());
+            throw MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable", v.getClass().getName());
         }
     }
 
@@ -129,10 +130,10 @@
      * @param v the value to add.
      * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries
      */
-    public void addValue(Comparable<?> v){
+    public void addValue(Comparable<?> v) {
         Comparable<?> obj = v;
         if (v instanceof Integer) {
-           obj = Long.valueOf(((Integer) v).longValue());
+            obj = Long.valueOf(((Integer) v).longValue());
         }
         try {
             Long count = freqTable.get(obj);
@@ -143,9 +144,7 @@
             }
         } catch (ClassCastException ex) {
             //TreeMap will throw ClassCastException if v is not comparable
-            throw MathRuntimeException.createIllegalArgumentException(
-                  "instance of class {0} not comparable to existing values",
-                  v.getClass().getName());
+            throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values", v.getClass().getName());
         }
     }
 
@@ -186,7 +185,9 @@
         addValue(Character.valueOf(v));
     }
 
-    /** Clears the frequency table */
+    /**
+     * Clears the frequency table
+     */
     public void clear() {
         freqTable.clear();
     }
@@ -205,7 +206,6 @@
     }
 
     //-------------------------------------------------------------------------
-
     /**
      * Returns the sum of all frequencies.
      *
@@ -214,7 +214,7 @@
     public long getSumFreq() {
         long result = 0;
         Iterator<Long> iterator = freqTable.values().iterator();
-        while (iterator.hasNext())  {
+        while (iterator.hasNext()) {
             result += iterator.next().longValue();
         }
         return result;
@@ -246,7 +246,7 @@
         }
         long result = 0;
         try {
-            Long count =  freqTable.get(v);
+            Long count = freqTable.get(v);
             if (count != null) {
                 result = count.longValue();
             }
@@ -287,9 +287,8 @@
     }
 
     //-------------------------------------------------------------
-
-    /**
-      * Returns the percentage of values that are equal to v
+    /**
+     * Returns the percentage of values that are equal to v
      * (as a proportion between 0 and 1).
      * <p>
      * Returns <code>Double.NaN</code> if no values have been added.</p>
@@ -300,7 +299,7 @@
      */
     @Deprecated
     public double getPct(Object v) {
-        return getCumPct((Comparable<?>) v);
+        return getPct(((Comparable<?>) (v)));
     }
 
     /**
@@ -354,7 +353,6 @@
     }
 
     //-----------------------------------------------------------------------------------------
-
     /**
      * Returns the cumulative frequency of values less than or equal to v.
      * <p>
@@ -378,7 +376,7 @@
      * @return the proportion of values equal to v
      */
     @SuppressWarnings("unchecked")
-        public long getCumFreq(Comparable<?> v) {
+    public long getCumFreq(Comparable<?> v) {
         if (getSumFreq() == 0) {
             return 0;
         }
@@ -390,24 +388,23 @@
             c = new NaturalComparator();
         }
         long result = 0;
-
         try {
             Long value = freqTable.get(v);
             if (value != null) {
                 result = value.longValue();
             }
         } catch (ClassCastException ex) {
-            return result;   // v is not comparable
-        }
-
+            // v is not comparable
+            return result;
+        }
         if (c.compare(v, freqTable.firstKey()) < 0) {
-            return 0;  // v is comparable, but less than first value
-        }
-
+            // v is comparable, but less than first value
+            return 0;
+        }
         if (c.compare(v, freqTable.lastKey()) >= 0) {
-            return getSumFreq();    // v is comparable, but greater than the last value
-        }
-
+            // v is comparable, but greater than the last value
+            return getSumFreq();
+        }
         Iterator<Comparable<?>> values = valuesIterator();
         while (values.hasNext()) {
             Comparable<?> nextValue = values.next();
@@ -420,7 +417,7 @@
         return result;
     }
 
-     /**
+    /**
      * Returns the cumulative frequency of values less than or equal to v.
      * <p>
      * Returns 0 if v is not comparable to the values set.</p>
@@ -432,7 +429,7 @@
         return getCumFreq(Long.valueOf(v));
     }
 
-     /**
+    /**
      * Returns the cumulative frequency of values less than or equal to v.
      * <p>
      * Returns 0 if v is not comparable to the values set.</p>
@@ -457,7 +454,6 @@
     }
 
     //----------------------------------------------------------------------------------------------
-
     /**
      * Returns the cumulative percentage of values less than or equal to v
      * (as a proportion between 0 and 1).
@@ -473,7 +469,6 @@
     @Deprecated
     public double getCumPct(Object v) {
         return getCumPct((Comparable<?>) v);
-
     }
 
     /**
@@ -540,7 +535,9 @@
      */
     private static class NaturalComparator<T extends Comparable<T>> implements Comparator<Comparable<T>>, Serializable {
 
-        /** Serializable version identifier */
+        /**
+         * Serializable version identifier
+         */
         private static final long serialVersionUID = -3852193713161395148L;
 
         /**
@@ -562,17 +559,20 @@
         }
     }
 
-    /** {@inheritDoc} */
+    /**
+     * {@inheritDoc}
+     */
     @Override
     public int hashCode() {
         final int prime = 31;
         int result = 1;
-        result = prime * result +
-                 ((freqTable == null) ? 0 : freqTable.hashCode());
+        result = prime * result + ((freqTable == null) ? 0 : freqTable.hashCode());
         return result;
     }
 
-    /** {@inheritDoc} */
+    /**
+     * {@inheritDoc}
+     */
     @Override
     public boolean equals(Object obj) {
         if (this == obj)
@@ -589,5 +589,4 @@
             return false;
         return true;
     }
-
 }
