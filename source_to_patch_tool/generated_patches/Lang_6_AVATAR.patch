--- ./buggy/CharSequenceTranslator.java
+++ ./patched/Lang_6_AVATAR\src\main\java\org\apache\commons\lang3\text\translate\CharSequenceTranslator.java
@@ -22,20 +22,20 @@
 import java.util.Locale;

 

 /**

- * An API for translating text. 

- * Its core use is to escape and unescape text. Because escaping and unescaping 

+ * An API for translating text.

+ * Its core use is to escape and unescape text. Because escaping and unescaping

  * is completely contextual, the API does not present two separate signatures.

- * 

+ *

  * @since 3.0

  * @version $Id$

  */

 public abstract class CharSequenceTranslator {

 

     /**

-     * Translate a set of codepoints, represented by an int index into a CharSequence, 

-     * into another set of codepoints. The number of codepoints consumed must be returned, 

-     * and the only IOExceptions thrown must be from interacting with the Writer so that 

-     * the top level API may reliable ignore StringWriter IOExceptions. 

+     * Translate a set of codepoints, represented by an int index into a CharSequence,

+     * into another set of codepoints. The number of codepoints consumed must be returned,

+     * and the only IOExceptions thrown must be from interacting with the Writer so that

+     * the top level API may reliable ignore StringWriter IOExceptions.

      *

      * @param input CharSequence that is being translated

      * @param index int representing the current point of translation

@@ -46,7 +46,7 @@
     public abstract int translate(CharSequence input, int index, Writer out) throws IOException;

 

     /**

-     * Helper for non-Writer usage. 

+     * Helper for non-Writer usage.

      * @param input CharSequence to be translated

      * @return String output of translation

      */

@@ -65,8 +65,8 @@
     }

 

     /**

-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 

-     * tightly coupled with the abstract method of this class. 

+     * Translate an input onto a Writer. This is intentionally final as its algorithm is

+     * tightly coupled with the abstract method of this class.

      *

      * @param input CharSequence that is being translated

      * @param out Writer to translate the text to

@@ -86,19 +86,19 @@
             if (consumed == 0) {

                 char[] c = Character.toChars(Character.codePointAt(input, pos));

                 out.write(c);

-                pos+= c.length;

+                pos += c.length;

                 continue;

             }

-//          // contract with translators is that they have to understand codepoints 

-//          // and they just took care of a surrogate pair

+            //          // contract with translators is that they have to understand codepoints

+            //          // and they just took care of a surrogate pair

             for (int pt = 0; pt < consumed; pt++) {

-                pos += Character.charCount(Character.codePointAt(input, pos));

+                pos += Character.charCount(Character.codePointAt(input, pt));

             }

         }

     }

 

     /**

-     * Helper method to create a merger of this translator with another set of 

+     * Helper method to create a merger of this translator with another set of

      * translators. Useful in customizing the standard functionality.

      *

      * @param translators CharSequenceTranslator array of translators to merge with this one

@@ -121,5 +121,4 @@
     public static String hex(int codepoint) {

         return Integer.toHexString(codepoint).toUpperCase(Locale.ENGLISH);

     }

-

 }
