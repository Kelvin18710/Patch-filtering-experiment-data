--- /src/java/org/apache/commons/lang/time/DateUtils.java
+++ /src/java/org/apache/commons/lang/time/DateUtils.java
@@ -38,26 +38,30 @@
  * @version $Id$
  */
 public class DateUtils {
-    
+
     /**
      * The UTC time zone  (often referred to as GMT).
      */
     public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone("GMT");
+
     /**
      * Number of milliseconds in a standard second.
      * @since 2.1
      */
     public static final long MILLIS_PER_SECOND = 1000;
+
     /**
      * Number of milliseconds in a standard minute.
      * @since 2.1
      */
     public static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;
+
     /**
      * Number of milliseconds in a standard hour.
      * @since 2.1
      */
     public static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;
+
     /**
      * Number of milliseconds in a standard day.
      * @since 2.1
@@ -70,17 +74,8 @@
      */
     public final static int SEMI_MONTH = 1001;
 
-    private static final int[][] fields = {
-            {Calendar.MILLISECOND},
-            {Calendar.SECOND},
-            {Calendar.MINUTE},
-            {Calendar.HOUR_OF_DAY, Calendar.HOUR},
-            {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM 
-                /* Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK, Calendar.DAY_OF_WEEK_IN_MONTH */
-            },
-            {Calendar.MONTH, DateUtils.SEMI_MONTH},
-            {Calendar.YEAR},
-            {Calendar.ERA}};
+    private static final int[][] fields = { { Calendar.MILLISECOND }, { Calendar.SECOND }, { Calendar.MINUTE }, { Calendar.HOUR_OF_DAY, Calendar.HOUR }, { Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM /* Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK, Calendar.DAY_OF_WEEK_IN_MONTH */
+    }, { Calendar.MONTH, DateUtils.SEMI_MONTH }, { Calendar.YEAR }, { Calendar.ERA } };
 
     /**
      * A week range, starting on Sunday.
@@ -131,7 +126,7 @@
      * <p>28 Mar 2002 13:45 and 28 Mar 2002 06:01 would return true.
      * 28 Mar 2002 13:45 and 12 Mar 2002 13:45 would return false.
      * </p>
-     * 
+     *
      * @param date1  the first date, not altered, not null
      * @param date2  the second date, not altered, not null
      * @return true if they represent the same day
@@ -155,7 +150,7 @@
      * <p>28 Mar 2002 13:45 and 28 Mar 2002 06:01 would return true.
      * 28 Mar 2002 13:45 and 12 Mar 2002 13:45 would return false.
      * </p>
-     * 
+     *
      * @param cal1  the first calendar, not altered, not null
      * @param cal2  the second calendar, not altered, not null
      * @return true if they represent the same day
@@ -166,9 +161,7 @@
         if (cal1 == null || cal2 == null) {
             throw new IllegalArgumentException("The date must not be null");
         }
-        return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
-                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
-                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));
+        return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));
     }
 
     //-----------------------------------------------------------------------
@@ -176,7 +169,7 @@
      * <p>Checks if two date objects represent the same instant in time.</p>
      *
      * <p>This method compares the long millisecond time of the two objects.</p>
-     * 
+     *
      * @param date1  the first date, not altered, not null
      * @param date2  the second date, not altered, not null
      * @return true if they represent the same millisecond instant
@@ -194,7 +187,7 @@
      * <p>Checks if two calendar objects represent the same instant in time.</p>
      *
      * <p>This method compares the long millisecond time of the two objects.</p>
-     * 
+     *
      * @param cal1  the first calendar, not altered, not null
      * @param cal2  the second calendar, not altered, not null
      * @return true if they represent the same millisecond instant
@@ -214,7 +207,7 @@
      *
      * <p>This method compares the values of the fields of the two objects.
      * In addition, both calendars must be the same of the same type.</p>
-     * 
+     *
      * @param cal1  the first calendar, not altered, not null
      * @param cal2  the second calendar, not altered, not null
      * @return true if they represent the same millisecond instant
@@ -225,24 +218,17 @@
         if (cal1 == null || cal2 == null) {
             throw new IllegalArgumentException("The date must not be null");
         }
-        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&
-                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&
-                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&
-                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&
-                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&
-                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
-                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
-                cal1.getClass() == cal2.getClass());
+        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
     }
 
     //-----------------------------------------------------------------------
     /**
      * <p>Parses a string representing a date by trying a variety of different parsers.</p>
-     * 
+     *
      * <p>The parse will try each parse pattern in turn.
      * A parse is only deemed sucessful if it parses the whole of the input string.
      * If no parse patterns match, a ParseException is thrown.</p>
-     * 
+     *
      * @param str  the date to parse, not null
      * @param parsePatterns  the date format patterns to use, see SimpleDateFormat, not null
      * @return the parsed date
@@ -253,7 +239,6 @@
         if (str == null || parsePatterns == null) {
             throw new IllegalArgumentException("Date and Patterns must not be null");
         }
-        
         SimpleDateFormat parser = null;
         ParsePosition pos = new ParsePosition(0);
         for (int i = 0; i < parsePatterns.length; i++) {
@@ -413,10 +398,10 @@
      * 13:45:01.231, if this was passed with HOUR, it would return
      * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it
      * would return 1 April 2002 0:00:00.000.</p>
-     * 
+     *
      * <p>For a date in a timezone that handles the change to daylight
      * saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.
-     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a 
+     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a
      * date that crosses this time would produce the following values:
      * <ul>
      * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>
@@ -425,7 +410,7 @@
      * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>
      * </ul>
      * </p>
-     * 
+     *
      * @param date  the date to work with
      * @param field  the field from <code>Calendar</code>
      *  or <code>SEMI_MONTH</code>
@@ -451,10 +436,10 @@
      * 13:45:01.231, if this was passed with HOUR, it would return
      * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it
      * would return 1 April 2002 0:00:00.000.</p>
-     * 
+     *
      * <p>For a date in a timezone that handles the change to daylight
      * saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.
-     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a 
+     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a
      * date that crosses this time would produce the following values:
      * <ul>
      * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>
@@ -463,7 +448,7 @@
      * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>
      * </ul>
      * </p>
-     * 
+     *
      * @param date  the date to work with
      * @param field  the field from <code>Calendar</code>
      *  or <code>SEMI_MONTH</code>
@@ -488,10 +473,10 @@
      * 13:45:01.231, if this was passed with HOUR, it would return
      * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it
      * would return 1 April 2002 0:00:00.000.</p>
-     * 
+     *
      * <p>For a date in a timezone that handles the change to daylight
      * saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows.
-     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a 
+     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a
      * date that crosses this time would produce the following values:
      * <ul>
      * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>
@@ -500,7 +485,7 @@
      * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>
      * </ul>
      * </p>
-     * 
+     *
      * @param date  the date to work with, either Date or Calendar
      * @param field  the field from <code>Calendar</code>
      *  or <code>SEMI_MONTH</code>
@@ -532,7 +517,7 @@
      * 13:45:01.231, if you passed with HOUR, it would return 28 Mar
      * 2002 13:00:00.000.  If this was passed with MONTH, it would
      * return 1 Mar 2002 0:00:00.000.</p>
-     * 
+     *
      * @param date  the date to work with
      * @param field  the field from <code>Calendar</code>
      *  or <code>SEMI_MONTH</code>
@@ -558,7 +543,7 @@
      * 13:45:01.231, if you passed with HOUR, it would return 28 Mar
      * 2002 13:00:00.000.  If this was passed with MONTH, it would
      * return 1 Mar 2002 0:00:00.000.</p>
-     * 
+     *
      * @param date  the date to work with
      * @param field  the field from <code>Calendar</code>
      *  or <code>SEMI_MONTH</code>
@@ -583,7 +568,7 @@
      * 13:45:01.231, if you passed with HOUR, it would return 28 Mar
      * 2002 13:00:00.000.  If this was passed with MONTH, it would
      * return 1 Mar 2002 0:00:00.000.</p>
-     * 
+     *
      * @param date  the date to work with, either <code>Date</code>
      *  or <code>Calendar</code>
      * @param field  the field from <code>Calendar</code>
@@ -611,7 +596,7 @@
     //-----------------------------------------------------------------------
     /**
      * <p>Internal calculation method.</p>
-     * 
+     *
      * @param val  the calendar
      * @param field  the field constant
      * @param round  true to round, false to truncate
@@ -621,52 +606,46 @@
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
-        
         if (field == Calendar.MILLISECOND) {
             return;
         }
-
         // ----------------- Fix for LANG-59 ---------------------- START ---------------
         // see http://issues.apache.org/jira/browse/LANG-59
         //
         // Manually truncate milliseconds, seconds and minutes, rather than using
         // Calendar methods.
-
         Date date = val.getTime();
         long time = date.getTime();
         boolean done = false;
-
         // truncate milliseconds
         int millisecs = val.get(Calendar.MILLISECOND);
         if (!round || millisecs < 500) {
             time = time - millisecs;
-        if (field == Calendar.SECOND) {
-            done = true;
+            if (field == Calendar.SECOND) {
+                done = true;
             }
         }
-
         // truncate seconds
         int seconds = val.get(Calendar.SECOND);
         if (!done && (!round || seconds < 30)) {
             time = time - (seconds * 1000L);
-        if (field == Calendar.MINUTE) {
-            done = true;
+            if (field == Calendar.MINUTE) {
+                done = true;
             }
         }
-
         // truncate minutes
         int minutes = val.get(Calendar.MINUTE);
         if (!done && (!round || minutes < 30)) {
             time = time - (minutes * 60000L);
         }
-
         // reset time
-        if (date.getTime() != time) {
-            date.setTime(time);
-            val.setTime(date);
+        if (seconds <= org.apache.commons.lang.time.DateUtils.fields.length) {
+            if (date.getTime() != time) {
+                date.setTime(time);
+                val.setTime(date);
+            }
         }
         // ----------------- Fix for LANG-59 ----------------------- END ----------------
-
         boolean roundUp = false;
         for (int i = 0; i < fields.length; i++) {
             for (int j = 0; j < fields[i].length; j++) {
@@ -696,7 +675,7 @@
             int offset = 0;
             boolean offsetSet = false;
             //These are special types of fields that require different rounding rules
-            switch (field) {
+            switch(field) {
                 case DateUtils.SEMI_MONTH:
                     if (fields[i][0] == Calendar.DATE) {
                         //If we're going to drop the DATE field's value,
@@ -740,7 +719,6 @@
             }
         }
         throw new IllegalArgumentException("The field " + field + " is not supported");
-
     }
 
     //-----------------------------------------------------------------------
@@ -758,7 +736,7 @@
      *
      * @param focus  the date to work with, not null
      * @param rangeStyle  the style constant to use. Must be one of
-     * {@link DateUtils#RANGE_MONTH_SUNDAY}, 
+     * {@link DateUtils#RANGE_MONTH_SUNDAY},
      * {@link DateUtils#RANGE_MONTH_MONDAY},
      * {@link DateUtils#RANGE_WEEK_SUNDAY},
      * {@link DateUtils#RANGE_WEEK_MONDAY},
@@ -791,7 +769,7 @@
      *
      * @param focus  the date to work with
      * @param rangeStyle  the style constant to use. Must be one of
-     * {@link DateUtils#RANGE_MONTH_SUNDAY}, 
+     * {@link DateUtils#RANGE_MONTH_SUNDAY},
      * {@link DateUtils#RANGE_MONTH_MONDAY},
      * {@link DateUtils#RANGE_WEEK_SUNDAY},
      * {@link DateUtils#RANGE_WEEK_MONDAY},
@@ -809,7 +787,7 @@
         Calendar end = null;
         int startCutoff = Calendar.SUNDAY;
         int endCutoff = Calendar.SATURDAY;
-        switch (rangeStyle) {
+        switch(rangeStyle) {
             case RANGE_MONTH_SUNDAY:
             case RANGE_MONTH_MONDAY:
                 //Set start to the first of the month
@@ -831,7 +809,7 @@
                 //Set start and end to the current date
                 start = truncate(focus, Calendar.DATE);
                 end = truncate(focus, Calendar.DATE);
-                switch (rangeStyle) {
+                switch(rangeStyle) {
                     case RANGE_WEEK_SUNDAY:
                         //already set by default
                         break;
@@ -909,11 +887,13 @@
      * <p>Date iterator.</p>
      */
     static class DateIterator implements Iterator {
+
         private final Calendar endFinal;
+
         private final Calendar spot;
-        
+
         /**
-         * Constructs a DateIterator that ranges from one date to another. 
+         * Constructs a DateIterator that ranges from one date to another.
          *
          * @param startFinal start date (inclusive)
          * @param endFinal end date (not inclusive)
@@ -949,7 +929,7 @@
 
         /**
          * Always throws UnsupportedOperationException.
-         * 
+         *
          * @throws UnsupportedOperationException
          * @see java.util.Iterator#remove()
          */
@@ -957,34 +937,35 @@
             throw new UnsupportedOperationException();
         }
     }
-    
-    //------------------------------------------------------------------------- 
+
+    //-------------------------------------------------------------------------
     // Deprecated int constants
     // TODO: Remove in 3.0
-    
     /**
      * Number of milliseconds in a standard second.
-     * 
+     *
      * @deprecated Use MILLIS_PER_SECOND. This will be removed in Commons Lang 3.0.
      */
     public static final int MILLIS_IN_SECOND = 1000;
+
     /**
      * Number of milliseconds in a standard minute.
-     * 
+     *
      * @deprecated Use MILLIS_PER_MINUTE. This will be removed in Commons Lang 3.0.
      */
     public static final int MILLIS_IN_MINUTE = 60 * 1000;
+
     /**
      * Number of milliseconds in a standard hour.
-     * 
+     *
      * @deprecated Use MILLIS_PER_HOUR. This will be removed in Commons Lang 3.0.
      */
     public static final int MILLIS_IN_HOUR = 60 * 60 * 1000;
+
     /**
      * Number of milliseconds in a standard day.
-     * 
+     *
      * @deprecated Use MILLIS_PER_DAY. This will be removed in Commons Lang 3.0.
      */
     public static final int MILLIS_IN_DAY = 24 * 60 * 60 * 1000;
-    
 }
